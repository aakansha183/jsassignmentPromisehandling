async function batchFetch(urls, batchSize) {
    const results = [];

    async function processBatch(batch) {
        const batchResults = await Promise.all(batch.map(url => 
            fetch(url).then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status} for URL: ${url}`);
                }
                return response.json();
            }).catch(error => ({ error: error.message }))
        ));
        results.push(...batchResults);
    }

    for (let i = 0; i < urls.length; i += batchSize) {
        const batch = urls.slice(i, i + batchSize);
        await processBatch(batch);
    }

    return results;
}
const urls = [
    'https://jsonplaceholder.typicode.com/posts/1',
    'https://jsonplaceholder.typicode.com/posts/2',
    'https://jsonplaceholder.typicode.com/posts/3',
    'https://jsonplaceholder.typicode.com/posts/4',
    'https://jsonplaceholder.typicode.com/posts/5'
];
const batchSize = 2;

batchFetch(urls, batchSize)
    .then(results => console.log('All results:', results))
    .catch(error => console.error('Error:', error.message));
