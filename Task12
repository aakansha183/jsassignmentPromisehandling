async function fetchWithExponentialBackoff(url, maxRetries) {
    let retries = 0;

    while (retries <= maxRetries) {
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status} for URL: ${url}`);
            }
            return await response.json(); 
        } catch (error) {
            retries += 1;
            if (retries > maxRetries) {
                throw new Error(`Failed after ${maxRetries} retries: ${error.message}`);
            }
            console.error(`Attempt ${retries} failed: ${error.message}`);
            const delay = Math.pow(2, retries) * 100; 
            await new Promise(resolve => setTimeout(resolve, delay)); 
        }
    }
}

const url = 'https://jsonplaceholder.typicode.com/posts/1';
const maxRetries = 5;

fetchWithExponentialBackoff(url, maxRetries)
    .then(data => console.log('Fetched data:', data))
    .catch(error => console.error('Error:', error.message));
